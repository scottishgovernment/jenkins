#!/bin/sh
# Set the next build number for a job based on the last tag in git

set -e
jenkins="/var/lib/jenkins"

# Outputs the last build number for a job determined from git tags
lastBuild() {
  local job="$1"
  local xml="$jenkins/jobs/$job/config.xml"
  local url
  url=$(xpath -q -e "/project/scm/userRemoteConfigs/*/url/text()" "$xml" | head -1)
  if [ -n "$url" ]; then
    local last
    last=$(git ls-remote --tags "$url" \
      | sed -E '/\^/d;s/^(.*\.)([0-9]*)$/\2/' \
      | sort -nr \
      | head -1)
    echo "$last"
  fi
}


# Sets the next build number for a job
setBuildNumber() {
  local job="$1"
  local version="$2"
  echo "$version" > "$jenkins/jobs/$job/nextBuildNumber"
}


# Outputs the list of jobs generated by this seed job.
jobs() {
  local seed=../../mygov-seed
  local last
  last=$(readlink "$seed/builds/lastSuccessfulBuild")
  xpath -q -e '//jobName/text()' "$seed/builds/$last/build.xml"
}


# Updates the next build number for a job, if it can be determined.
updateJob() {
  local job="$1"
  local last
  last=$(lastBuild "$job")
  if [ -n "$last" ]; then
    local next=$(( last + 1 ))
    setBuildNumber "$job" "$next"
  fi
}

updateJobs() {
  jobs | while read job; do
    updateJob "$job"
  done
}

checkEnvironment() {
  if [ -z "$BUILD_ID" ]; then
    echo "No BUILD_ID specified. This script should be run from a Jenkins job."
    exit 1
  fi
  local file="../builds/$last/build.xml"
  if [ ! -f "$file" ]; then
    echo "$file not found:"
    exit 1
  fi
}

updateJobs
