#!/bin/sh
# Set the next build number for a job based on the last tag in git

set -e
jenkins="/var/lib/jenkins"
joblist="${jenkins}/jobs/mygov-seed/workspace/jobs.txt"

# Outputs the last build number determined from tags in the given git repo.
lastBuild() {
  local url="$1"
    local last
    last=$(git ls-remote --tags "$url" \
      | sed -E '/\^/d;s/^(.*\.)([0-9]*)$/\2/' \
      | sort -nr \
      | head -1)
    echo "$last"
}

# Sets the next build number for a job
setBuildNumber() {
  local job="$1"
  local version="$2"
  echo "$version" > "$jenkins/jobs/$job/nextBuildNumber"
}

# Updates the next build number for a job, if it can be determined.
updateJob() {
  local job="$1"
  local url="$2"
  local last
  printf "%-20s" "${job}:"
  last=$(lastBuild "$url")
  local next
  if [ -n "$last" ]; then
    next=$(( last + 1 ))
  else
    next=1
  fi
  printf "$next\n"
  setBuildNumber "$job" "$next"
}

updateJobs() {
  echo "Updating build numbers:"
  while IFS=, read job url; do
    updateJob "$job" "$url"
  done < "$joblist"
}

checkEnvironment() {
  if [ -z "$BUILD_ID" ]; then
    echo "No BUILD_ID specified. This script should be run from a Jenkins job."
    exit 1
  fi
  if [ ! -f "$joblist" ]; then
    echo "Job list not found: ${PWD}/$joblist"
    exit 1
  fi
}

checkEnvironment
updateJobs
